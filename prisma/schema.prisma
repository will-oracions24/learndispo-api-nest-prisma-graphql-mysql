// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  username        String            @unique
  email           String            @unique
  password        String
  RevisionSession RevisionSession[]
  responses       UserResponse[]
}

model Subject {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  levels      Level[]
  lessons     Lesson[]
}

model Level {
  id               String            @id @default(uuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  name             String
  description      String
  subjects         Subject[]
  revisionSessions RevisionSession[]
}

// model Subject_Level {
//   id          String   @id @default(uuid())
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   description String
// }

model RevisionSession {
  id             String                @id @default(uuid())
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  SubjectLevelID String
  status         RevisionSessionStatus
  user           User                  @relation(fields: [userId], references: [id])
  userId         String
  lessons        Lesson[]
  level          Level                 @relation(fields: [levelId], references: [id])
  levelId        String
  performances   Performance[]
}

model Lesson {
  id               String            @id @default(uuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  revisionSessions RevisionSession[]
  subject          Subject           @relation(fields: [subjectId], references: [id])
  subjectId        String
}

model QuestionType {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  description String
  questions   Question[]
}

model Question {
  id             String             @id @default(uuid())
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  content        String
  Difficulty     QuestionDifficulty
  type           QuestionType       @relation(fields: [questionTypeId], references: [id])
  questionTypeId String
  answerOptions  AnswerOption[]
  userResponses  UserResponse[]
}

model AnswerOption {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  content      String
  isCorrect    Boolean       @default(false)
  question     Question      @relation(fields: [questionId], references: [id])
  questionId   String
  UserResponse UserResponse?
}

model UserResponse {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  reponseText    String
  isCorrect      Boolean
  question       Question     @relation(fields: [questionId], references: [id])
  questionId     String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  selectedOption AnswerOption @relation(fields: [answerOptionId], references: [id])
  answerOptionId String       @unique
}

model Performance {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  score             String
  feedback          String
  revisionSession   RevisionSession @relation(fields: [revisionSessionId], references: [id])
  revisionSessionId String
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

enum RevisionSessionStatus {
  IN_PROGRESS
  COMPLETED
}
