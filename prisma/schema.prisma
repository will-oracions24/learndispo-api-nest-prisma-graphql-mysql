// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  username        String            @unique
  email           String            @unique
  password        String
  RevisionSession RevisionSession[]
  responses       UserResponse[]
}

model Subject {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  levels      Level[]
  lessons     Lesson[]
}

model Level {
  id               String            @id @default(uuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  name             String
  description      String
  subjects         Subject[]
  revisionSessions RevisionSession[]
  exercise         Exercise[]
}

// model Subject_Level {
//   id          String   @id @default(uuid())
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   description String
// }

model RevisionSession {
  id           String                @id @default(uuid())
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  score        String
  feedback     String
  status       RevisionSessionStatus
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  level        Level                 @relation(fields: [levelId], references: [id])
  levelId      String
  UserResponse UserResponse[]
  exercise     Exercise              @relation(fields: [exerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exerciseId   String
  Performance  Performance[]
  lessons      Lesson[]
}

model Exercise {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  name            String
  questions       Question[]
  revisionSession RevisionSession[]
  lessons         Lesson[]
  lessonId        String?
  questionType    QuestionType      @relation(fields: [questionTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionTypeId  String
  level           Level             @relation(fields: [levelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  levelId         String
}

model Lesson {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  name              String
  description       String
  exercises         Exercise[]
  subject           Subject          @relation(fields: [subjectId], references: [id])
  subjectId         String
  RevisionSession   RevisionSession? @relation(fields: [revisionSessionId], references: [id])
  revisionSessionId String?
}

model QuestionType {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  description String
  questions   Question[]
  exercise    Exercise[]
}

model Question {
  id             String             @id @default(uuid())
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  content        String
  difficulty     QuestionDifficulty
  type           QuestionType       @relation(fields: [questionTypeId], references: [id])
  questionTypeId String
  answerOptions  AnswerOption[]
  userResponses  UserResponse[]
  exercise       Exercise           @relation(fields: [exerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exerciseId     String
}

model AnswerOption {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  content      String
  isCorrect    Boolean        @default(false)
  question     Question       @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId   String
  userResponse UserResponse[]
}

model UserResponse {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  reponseText       String
  isCorrect         Boolean         @default(false)
  question          Question        @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId        String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String
  selectedAnswer    AnswerOption    @relation(fields: [answerOptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  answerOptionId    String          @unique
  revisionSession   RevisionSession @relation(fields: [revisionSessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  revisionSessionId String
}

model Performance {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  score             String
  feedback          String
  revisionSession   RevisionSession @relation(fields: [revisionSessionId], references: [id])
  revisionSessionId String
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

enum RevisionSessionStatus {
  IN_PROGRESS
  COMPLETED
}
